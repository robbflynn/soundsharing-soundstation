<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 title="Edit channel"
		 xmlns:general="content.pages.station.panels.channels.panels.general.*" 
		 xmlns:broadcast="content.pages.station.panels.channels.panels.broadcast.*">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.managers.PopUpManager;
			
			import soundshare.station.content.pages.station.panels.channels.panels.broadcast.radio.StandardRadioBroadcastSettingsPanel;
			import soundshare.station.content.pages.station.panels.channels.panels.rights.ManageChannelRightsPanel;
			import soundshare.station.data.StationContext;
			import soundshare.station.data.PanelsContext;
			import soundshare.station.data.channels.ChannelContext;
			import soundshare.station.data.channels.broadcasts.StandardRadioContext;
			import soundshare.station.data.groups.GroupData;
			import soundshare.sdk.data.platlists.PlaylistContext;
			import soundshare.sdk.data.plugin.PluginConfigurationData;
			import soundshare.sdk.data.plugin.PluginData;
			import soundshare.sdk.db.mongo.base.events.MongoDBRestEvent;
			import soundshare.sdk.db.mongo.channels.ChannelsDataManager;
			
			import spark.components.Application;
			
			import utils.collection.CollectionUtil;
			
			[Bindable] private var pluginsCollection:ArrayCollection = new ArrayCollection();
			
			[Bindable] private var context:StationContext;
			[Bindable] private var genres:ArrayCollection = new ArrayCollection();
			
			private var tmpChannelContext:ChannelContext = new ChannelContext();
			
			private var manageChannelRightsPanel:ManageChannelRightsPanel;
			
			public function init(context:StationContext, panelsContext:PanelsContext):void
			{
				this.context = context;
				
				for (var i:int = 0; i < context.genres.length;i ++)
					genres.addItem({title: context.genres[i], selected: false});
				
				manageChannelRightsPanel = new ManageChannelRightsPanel();
				manageChannelRightsPanel.init(context, panelsContext);
				
				pluginsCollection.filterFunction = filterFunction;
			}
			
			private function filterFunction(item:Object):Boolean
			{
				return item.type == 1;
			}
			
			public function show():void
			{
				PopUpManager.addPopUp(this, FlexGlobals.topLevelApplication as Application, true);
				PopUpManager.centerPopUp(this);
				
				prepareContent();
			}
			
			protected function hide():void
			{
				context.selectedChannel = null;
				PopUpManager.removePopUp(this);
			}
			
			private function close():void
			{
				context.selectedChannel.clearObject();
				context.selectedChannel.readObject(tmpChannelContext);
				
				hide();
			}
			
			private function prepareContent():void
			{
				pluginsCollection.source = context.pluginsCollection.collection;
				pluginsCollection.refresh();
				
				nameTxt.text = context.selectedChannel.name;
				infoTxt.text = context.selectedChannel.info;
				
				radioButtonGroup.selectedValue = context.selectedChannel.type;
				
				var i:int;
				
				for (i = 0; i < genres.length;i ++)
					if (context.selectedChannel.genre && context.selectedChannel.genre.indexOf(genres.getItemAt(i).title) != -1)
						genres.getItemAt(i).selected = true;
					else
						genres.getItemAt(i).selected = false;
				
				genres.refresh();
				broadcastTypeCb.selectedIndex = -1;
				
				if (context.selectedChannel.plugin) 
					for (i = 0;i < pluginsCollection.length;i ++)
						if ((pluginsCollection.getItemAt(i) as PluginData)._id == context.selectedChannel.plugin.pluginId) 
						{
							broadcastTypeCb.selectedIndex = i;
							break;
						}
				
				tmpChannelContext.clearObject();
				tmpChannelContext.readObject(context.selectedChannel);
			}
			
			protected function save():void
			{
				context.selectedChannel.readObject({
					accountId: context.accountData._id,
					name: nameTxt.text,
					info: infoTxt.text,
					genre: genre,
					type: radioButtonGroup.selectedValue
				});
				
				if (context.selectedChannel.type == 0)
				{
					var groupData:GroupData;
					var g:Array = new Array();
					
					for (var i:int = 0;i < context.selectedChannel.groups.length;i ++)
					{
						groupData = CollectionUtil.getItemFromCollection("_id", context.selectedChannel.groups[i], context.groups) as GroupData;
						
						if (groupData.type != 0)
							g.push(context.selectedChannel.groups[i]);
					}
					
					context.selectedChannel.groups = g;
				}
				
				if (broadcastTypeCb.selectedItem && (!context.selectedChannel.plugin || context.selectedChannel.plugin.pluginId != broadcastTypeCb.selectedItem._id))
				{
					context.selectedChannel.plugin = new PluginConfigurationData();
					context.selectedChannel.plugin.pluginId = broadcastTypeCb.selectedItem._id;
				}
					
				var channelsDataManager:ChannelsDataManager = context.channelsDataManagersBuilder.build();
				
				channelsDataManager.addEventListener(MongoDBRestEvent.COMPLETE, onEditChannelComplete);
				channelsDataManager.addEventListener(MongoDBRestEvent.ERROR, onEditChannelError);
				channelsDataManager.updateRecord(context.selectedChannel._id, context.sessionId, context.selectedChannel.data);
			}
			
			private function onEditChannelComplete(e:MongoDBRestEvent):void
			{
				e.currentTarget.removeEventListener(MongoDBRestEvent.COMPLETE, onEditChannelComplete);
				e.currentTarget.removeEventListener(MongoDBRestEvent.ERROR, onEditChannelError);
				
				context.channelsDataManagersBuilder.destroy(e.currentTarget as ChannelsDataManager);
				context.channels.refresh();
				
				hide();
			}
			
			private function onEditChannelError(e:MongoDBRestEvent):void
			{
				e.currentTarget.removeEventListener(MongoDBRestEvent.COMPLETE, onEditChannelComplete);
				e.currentTarget.removeEventListener(MongoDBRestEvent.ERROR, onEditChannelError);	
					
				context.channelsDataManagersBuilder.destroy(e.currentTarget as ChannelsDataManager);
				
				Alert.show("Error!");
			}
			
			protected function editSettings():void
			{
				context.pluginsBuilder.buildConfiguration(broadcastTypeCb.selectedItem._id);
			}
			
			protected function manageRights():void
			{
				manageChannelRightsPanel.show();
				manageChannelRightsPanel.setData(tmpChannelContext);
			}
			
			//**************************************************************************************************************
			//**************************************************************************************************************
			//**************************************************************************************************************
			
			private function get genre():String
			{
				var g:String = "Unknown";
				
				for (var i:int = 0; i < genres.length;i ++)
				{
					if (genres.getItemAt(i).selected)
						g = g == "Unknown" ? genres.getItemAt(i).title : g + "," + genres.getItemAt(i).title;
				}
				
				return g;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:RadioButtonGroup id="radioButtonGroup" />
	</fx:Declarations>
	
	<s:VGroup paddingBottom="15" paddingLeft="15" paddingTop="20" paddingRight="15">
		
		<s:Label text="Name:" />
		<s:TextInput id="nameTxt" width="350" />
		
		<s:Label text="Info:" paddingTop="10"/>
		<s:TextArea id="infoTxt" width="350" height="80" />
		
		<s:Label text="Genre:" paddingTop="10"/>
		<s:Group>
			<s:List width="350" itemRenderer="soundshare.station.content.pages.station.panels.playlists.panels.renderers.GenreRender"
					dataProvider="{genres}"
					selectionColor="0xFFFFFF"
					rollOverColor="0xFFFFFF"
					borderVisible="false">
				<s:layout>
					<s:TileLayout requestedColumnCount="2" />
				</s:layout>
			</s:List>
		</s:Group>
		
		<s:Label text="Type:" paddingTop="10"/>
		<s:HGroup>
			<s:RadioButton id="publicType" label="public" value="0" group="{radioButtonGroup}" selected="true" />
			<s:RadioButton label="private" value="1" group="{radioButtonGroup}" />
			<s:RadioButton label="invisible" value="2" group="{radioButtonGroup}" />
			<s:Button label="Manage rights" enabled="{radioButtonGroup.selectedValue != 0}" 
					  click="manageRights()"/>
		</s:HGroup>
		
		<s:Label text="Broadcast type:" paddingTop="15"/>
		<s:HGroup>
			<s:ComboBox id="broadcastTypeCb" dataProvider="{pluginsCollection}" width="250" labelField="name" 
						prompt="Select broadcast type..."/>
			<s:Button label="Settings" click="editSettings()" enabled="{broadcastTypeCb.selectedItem}" />
		</s:HGroup>
		
		<s:HGroup paddingTop="5">
			<s:Button label="Save" click="save()" />
			<s:Button label="Cancel" click="close()" />
		</s:HGroup>
		
	</s:VGroup>
	
</s:Panel>