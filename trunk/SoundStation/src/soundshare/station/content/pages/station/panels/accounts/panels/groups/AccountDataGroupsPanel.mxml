<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%"
		 height="100%" 
		 updateComplete="onUpdateComplete(event)"
		 removedFromStage="onRemovedFromStage(event)" 
		 xmlns:paginators="soundshare.station.components.paginators.*">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import soundshare.station.content.pages.station.panels.accounts.panels.groups.renderers.TitleRenderer;
			import soundshare.station.content.pages.station.panels.accounts.panels.groups.renderers.channels.ChannelRenderer;
			import soundshare.station.content.pages.station.panels.accounts.panels.groups.renderers.channels.events.ChannelRendererEvent;
			import soundshare.station.content.pages.station.panels.accounts.panels.groups.renderers.playlists.PlaylistRenderer;
			import soundshare.station.content.pages.station.panels.accounts.panels.groups.renderers.playlists.events.PlaylistRendererEvent;
			import soundshare.station.data.StationContext;
			import soundshare.station.data.PanelsContext;
			import soundshare.station.data.channels.ChannelContext;
			import soundshare.station.data.groups.GroupData;
			import soundshare.sdk.data.platlists.PlaylistContext;
			
			import spark.events.RendererExistenceEvent;
			
			[Bindable] private var context:StationContext;
			[Bindable] private var panelsContext:PanelsContext;
			
			[Bindable] private var channelsCollection:ArrayCollection;
			[Bindable] private var playlistsCollection:ArrayCollection;
			[Bindable] private var groupsCollection:ArrayCollection;
			
			[Bindable] private var relationsCollection:ArrayCollection = new ArrayCollection();
			
			public function init(context:StationContext, panelsContext:PanelsContext, groupsCollection:ArrayCollection, channelsCollection:ArrayCollection, playlistsCollection:ArrayCollection):void
			{
				this.context = context;
				this.panelsContext = panelsContext;
				
				this.groupsCollection = groupsCollection;
				this.channelsCollection = channelsCollection;
				this.playlistsCollection = playlistsCollection;
			}
			
			protected function jointToGroup():void
			{
				panelsContext.joinToGroupsRequestPanel.show();
				panelsContext.joinToGroupsRequestPanel.setData(groupsGrid.selectedItem as GroupData);
			}
			
			protected function groupInfo():void
			{
				if (groupsGrid.selectedItem)
				{
					panelsContext.groupInfoPanel.show();
					panelsContext.groupInfoPanel.setData(groupsGrid.selectedItem as GroupData);
				}
			}
			
			protected function addRelationRender(e:RendererExistenceEvent):void
			{
				if (e.renderer is ChannelRenderer)
					e.renderer.addEventListener(ChannelRendererEvent.BROWSE, onBrowseChannel);
				else
				if (e.renderer is PlaylistRenderer)
					e.renderer.addEventListener(PlaylistRendererEvent.BROWSE, onBrowsePlaylist);
			}
			
			protected function removeRelationRender(e:RendererExistenceEvent):void
			{
				if (e.renderer is ChannelRenderer)
					e.renderer.addEventListener(ChannelRendererEvent.BROWSE, onBrowseChannel);
				else
				if (e.renderer is PlaylistRenderer)
					e.renderer.addEventListener(PlaylistRendererEvent.BROWSE, onBrowsePlaylist);
			}
			
			protected function onBrowseChannel(e:ChannelRendererEvent):void
			{
				panelsContext.channelPlayerPanel.show();
				panelsContext.channelPlayerPanel.setData(e.channelContext, groupsCollection);
			}
			
			protected function onBrowsePlaylist(e:PlaylistRendererEvent):void
			{
				panelsContext.playlistPlayerPanel.show();
				panelsContext.playlistPlayerPanel.setData(e.playlistContext, groupsCollection);
			}
			
			private function itemRendererFunction(item:Object):IFactory
			{
				if (item is PlaylistContext)
					return new ClassFactory(PlaylistRenderer);
				else
				if (item is ChannelContext)
					return new ClassFactory(ChannelRenderer);
				
				return new ClassFactory(TitleRenderer);
			}
			
			protected function onSelectGroup():void
			{
				var groupData:GroupData = groupsGrid.selectedItem as GroupData;
				var i:int;
				
				relationsCollection.removeAll();
				
				var channels:Array = new Array;
				var playlists:Array = new Array;
				
				for (i = 0;i < channelsCollection.length;i ++)
					if ((channelsCollection.getItemAt(i) as ChannelContext).groups.indexOf(groupData._id) != -1)
						channels.push(channelsCollection.getItemAt(i));
				
				if (channels.length > 0)
				{
					relationsCollection.addItem("Channels");
					relationsCollection.addAll(new ArrayCollection(channels));
				}
				
				for (i = 0;i < playlistsCollection.length;i ++)
					if ((playlistsCollection.getItemAt(i) as PlaylistContext).groups.indexOf(groupData._id) != -1)
						playlists.push(playlistsCollection.getItemAt(i));
				
				if (playlists.length > 0)
				{
					relationsCollection.addItem("Playlists");
					relationsCollection.addAll(new ArrayCollection(playlists));
				}
			}
			
			protected function onUpdateComplete(event:Event):void
			{
				groupsCollection.filterFunction = filterFunction;
				groupsCollection.refresh();
			}
			
			protected function onRemovedFromStage(event:Event):void
			{
				groupsCollection.filterFunction = null;
				groupsCollection.refresh();
			}
			
			private function filterFunction(item:Object):Boolean
			{
				return item.type == 0;
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup width="100%" height="100%" paddingBottom="15" paddingLeft="15" paddingRight="15" paddingTop="15">
		
		<s:HGroup width="100%" height="100%">
			
			<s:VGroup width="50%" height="100%" gap="0">
				<mx:DataGrid id="groupsGrid" dataProvider="{groupsCollection}" width="100%" height="100%"
							 doubleClickEnabled="true"
							 doubleClick="groupInfo()"
							 change="onSelectGroup()">
					<mx:columns>
						<mx:DataGridColumn dataField="name" headerText="Name" />
					</mx:columns>
				</mx:DataGrid>	
			</s:VGroup>
			
			
			<s:Group width="50%" height="100%">
				
				<s:Rect width="100%" height="100%">
					<s:stroke>
						<s:SolidColorStroke color="0x333333" />
					</s:stroke>
				</s:Rect>
				
				<s:VGroup width="100%" height="100%" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
					<s:Scroller width="100%" height="100%">
						<s:Group>
							<s:List id="relationsList" width="100%" dataProvider="{relationsCollection}" 
									itemRendererFunction="{itemRendererFunction}"
									rendererAdd="addRelationRender(event)"
									rendererRemove="removeRelationRender(event)"
									borderVisible="false">
								<s:layout>
									<s:VerticalLayout variableRowHeight="true" gap="5" />
								</s:layout>
							</s:List>
						</s:Group>
					</s:Scroller>
				</s:VGroup>
				
			</s:Group>
		</s:HGroup>
		
		<s:HGroup>
			<s:Button label="View group info" enabled="{groupsGrid.selectedItem}" 
					  click="groupInfo()"/>
			<s:Button label="Send join to group request" enabled="{groupsGrid.selectedItem}" 
					  click="jointToGroup()" />
		</s:HGroup>
		
	</s:VGroup>
	
</s:Group>
