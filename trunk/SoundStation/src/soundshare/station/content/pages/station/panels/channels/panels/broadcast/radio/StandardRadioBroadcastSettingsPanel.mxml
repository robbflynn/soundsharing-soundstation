<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 title="Standard broadcast settings">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.managers.PopUpManager;
			
			import soundshare.station.content.pages.station.panels.channels.panels.broadcast.panels.SelectPlaylistPanel;
			import soundshare.station.data.StationContext;
			import soundshare.station.data.channels.broadcasts.StandardRadioContext;
			import soundshare.sdk.data.platlists.PlaylistContext;
			
			import spark.components.Application;
			
			[Bindable] private var context:StationContext;
			[Bindable] private var selectedPlaylists:ArrayCollection = new ArrayCollection();
			
			private var selectPlaylistPanel:SelectPlaylistPanel;
			
			private var _standardRadioContext:StandardRadioContext;
			
			public function get standardRadioContext():StandardRadioContext
			{
				return _standardRadioContext;
			}
			
			public function init(context:StationContext):void
			{
				this.context = context;
				
				selectPlaylistPanel = new SelectPlaylistPanel();
				selectPlaylistPanel.addEventListener(Event.SELECT, onSelectPlaylist);
				selectPlaylistPanel.init(context);
			}
			
			public function setData(value:StandardRadioContext):void
			{
				_standardRadioContext = value;
				
				selectedPlaylists.removeAll();
				
				trace("setData:", standardRadioContext, standardRadioContext.playlists);
				
				if (standardRadioContext)
				{
					var playlistContext:PlaylistContext;
					
					for (var i:int = 0;i < standardRadioContext.playlists.length;i ++)
					{
						playlistContext = getPlaylistById(standardRadioContext.playlists[i]);
						selectedPlaylists.addItem(playlistContext);
					}
				}
			}
			
			private function getPlaylistById(id:String):PlaylistContext
			{
				for (var i:int = 0;i < context.playlists.length;i ++)
					if ((context.playlists.getItemAt(i) as PlaylistContext)._id == id)
						return context.playlists.getItemAt(i) as PlaylistContext;
				
				return null;
			}
			
			public function show():void
			{
				PopUpManager.addPopUp(this, FlexGlobals.topLevelApplication as Application, true);
				PopUpManager.centerPopUp(this);
			}
			
			public function close():void
			{
				PopUpManager.removePopUp(this);
			}
			
			private function save():void
			{
				var playlists:Array = new Array();
				
				for (var i:int = 0;i < selectedPlaylists.length;i ++)
					playlists.push((selectedPlaylists.getItemAt(i) as PlaylistContext)._id);
				
				standardRadioContext.playlists = playlists;
				
				dispatchEvent(new Event(Event.COMPLETE));
				close();
			}
			
			//**************************************************************************************************************
			//										Broadcast settings functions
			//**************************************************************************************************************
			
			protected function selectPlaylist():void
			{
				PopUpManager.addPopUp(selectPlaylistPanel, FlexGlobals.topLevelApplication as Application, true);
				PopUpManager.centerPopUp(selectPlaylistPanel);
			}
			
			protected function removePlaylist():void
			{
				var index:int = selectedPlaylists.getItemIndex(playlistsGrid.selectedItem);
				
				selectedPlaylists.removeItemAt(index);
				selectedPlaylists.refresh();
			}
			
			protected function moveUp():void
			{
				if (playlistsGrid.selectedIndex != 0)
				{
					var item:PlaylistContext = playlistsGrid.selectedItem as PlaylistContext;
					var index:int = selectedPlaylists.getItemIndex(item);
					
					selectedPlaylists.removeItemAt(index);
					selectedPlaylists.addItemAt(item, index - 1);
					selectedPlaylists.refresh();
					
					playlistsGrid.selectedItem = item;
				}
			}
			
			protected function moveDown():void
			{
				if (playlistsGrid.selectedIndex != selectedPlaylists.length - 1)
				{
					var item:PlaylistContext = playlistsGrid.selectedItem as PlaylistContext;
					var index:int = selectedPlaylists.getItemIndex(item);
					
					selectedPlaylists.removeItemAt(index);
					selectedPlaylists.addItemAt(item, index + 1);
					selectedPlaylists.refresh();
					
					playlistsGrid.selectedItem = item;
				}
			}
			
			private function onSelectPlaylist(e:Event):void
			{
				selectedPlaylists.addItem(selectPlaylistPanel.playlistData);
			}
			
			//**************************************************************************************************************
			//**************************************************************************************************************
			//**************************************************************************************************************
			
			private function totalLabelFunc(item:Object, column:DataGridColumn):String 
			{
				return item.total;
			}
			
			private function genreLabelFunc(item:Object, column:DataGridColumn):String 
			{
				return item.genre ? String(item.genre).split(",").join(", ") : "";
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup paddingBottom="15" paddingLeft="15" paddingTop="20" paddingRight="15">
		
		<s:VGroup>
			
			<s:Label text="Playlists:" paddingTop="10"/>
			
			<mx:DataGrid id="playlistsGrid" dataProvider="{selectedPlaylists}" width="450" 
						 rowCount="6">
				<mx:columns>
					<mx:DataGridColumn dataField="name" headerText="Name"  />
					<mx:DataGridColumn labelFunction="genreLabelFunc" headerText="Genre"  />
					<mx:DataGridColumn labelFunction="totalLabelFunc" headerText="Total" textAlign="center" width="80"/>
				</mx:columns>
			</mx:DataGrid>
			
			<s:HGroup>
				<s:Button label="Add playlist" click="selectPlaylist()" />
				<s:Button label="Delete playlist" click="removePlaylist()" enabled="{playlistsGrid.selectedItem}" />
				<s:Button label="Move up" click="moveUp()" 
						  enabled="{playlistsGrid.selectedItem &amp;&amp; playlistsGrid.selectedIndex != 0 &amp;&amp; selectedPlaylists.length &gt; 1}" />
				<s:Button label="Move down" click="moveDown()" 
						  enabled="{playlistsGrid.selectedItem &amp;&amp; playlistsGrid.selectedIndex != selectedPlaylists.length - 1 &amp;&amp; selectedPlaylists.length &gt; 1}" />
			</s:HGroup>
			
		</s:VGroup>
		
		<s:HGroup paddingTop="10">
			<s:Button label="OK" click="save()" />
			<s:Button label="Cancel" click="close()" />
		</s:HGroup>
		
	</s:VGroup>
	
</s:Panel>
