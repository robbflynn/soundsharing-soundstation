<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:paginators="soundshare.station.components.paginators.*"
		 resize="onResize(event)"
		 width="900">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.managers.PopUpManager;
			
			import soundshare.sdk.db.mongo.base.events.MongoDBRestEvent;
			import soundshare.sdk.db.mongo.members.MembersDataManager;
			import soundshare.station.components.paginators.events.PaginatorEvent;
			import soundshare.station.data.StationContext;
			import soundshare.station.data.members.MemberData;
			
			import spark.components.Application;
			
			[Bindable] private var context:StationContext;
			[Bindable] private var membersCollection:ArrayCollection = new ArrayCollection();
			
			public function init(context:StationContext):void
			{
				this.context = context;
				
				(FlexGlobals.topLevelApplication as Application).stage.addEventListener(Event.RESIZE, onResize);
			}
			
			public function show():void
			{
				PopUpManager.addPopUp(this, FlexGlobals.topLevelApplication as Application, true);
				PopUpManager.centerPopUp(this);
				
				getMembersList();
			}
			
			protected function close():void
			{
				PopUpManager.removePopUp(this);
			}
			
			private function onResize(e:Event):void
			{
				PopUpManager.centerPopUp(this);
			}
			
			protected function getMembersList():void
			{
				membersCollection.removeAll();
				
				var membersDataManager:MembersDataManager = context.membersDataManagersBuilder.build();
				
				membersDataManager.addEventListener(MongoDBRestEvent.COMPLETE, onMembersListComplete);
				membersDataManager.addEventListener(MongoDBRestEvent.ERROR, onMembersListError);
				membersDataManager.getMembersList(context.accountData._id, paginator.page, paginator.itemsPerPage);
			}
			
			private function onMembersListComplete(e:MongoDBRestEvent):void
			{
				trace("onMembersListComplete:", e.data.collection);
				
				e.currentTarget.removeEventListener(MongoDBRestEvent.COMPLETE, onMembersListComplete);
				e.currentTarget.removeEventListener(MongoDBRestEvent.ERROR, onMembersListError);
				
				context.membersDataManagersBuilder.destroy(e.currentTarget as MembersDataManager);
				
				var collection:Array = e.data.collection as Array;
				var memberData:MemberData;
				
				for (var i:int = 0;i < collection.length;i ++)
				{
					memberData = new MemberData();
					memberData.readObject(collection[i]);
					
					membersCollection.addItem(memberData);
				}
				
				paginator.update(e.data.page, e.data.pages);
			}
			
			private function onMembersListError(e:MongoDBRestEvent):void
			{
				e.currentTarget.removeEventListener(MongoDBRestEvent.COMPLETE, onMembersListComplete);
				e.currentTarget.removeEventListener(MongoDBRestEvent.ERROR, onMembersListError);
				
				context.membersDataManagersBuilder.destroy(e.currentTarget as MembersDataManager);
				
				Alert.show("Error list!");
			}
			
			protected function removeMember():void
			{
				/* var membersDataManager:MembersDataManager = context.membersDataManagersBuilder.build();
				
				membersDataManager.addEventListener(MongoDBRestEvent.COMPLETE, onRemoveMemberComplete);
				membersDataManager.addEventListener(MongoDBRestEvent.ERROR, onRemoveMemberError);
				membersDataManager.deleteRecord({_id: membersGrid.selectedItem._id}); */
			}
			
			private function onRemoveMemberComplete(e:MongoDBRestEvent):void
			{
				trace("onRemoveMemberComplete:");
				
				e.currentTarget.removeEventListener(MongoDBRestEvent.COMPLETE, onRemoveMemberComplete);
				e.currentTarget.removeEventListener(MongoDBRestEvent.ERROR, onRemoveMemberError);
				
				context.membersDataManagersBuilder.destroy(e.currentTarget as MembersDataManager);
				
				context.groups.removeItemAt(context.groups.getItemIndex(membersGrid.selectedItem));
				context.groups.refresh();
				
				Alert.show("Member is deleted!");
			}
			
			private function onRemoveMemberError(e:MongoDBRestEvent):void
			{
				e.currentTarget.removeEventListener(MongoDBRestEvent.COMPLETE, onRemoveMemberComplete);
				e.currentTarget.removeEventListener(MongoDBRestEvent.ERROR, onRemoveMemberError);
				
				context.membersDataManagersBuilder.destroy(e.currentTarget as MembersDataManager);
				
				Alert.show("Error delete!");
			}
			
			//**************************************************************************************************************
			//**************************************************************************************************************
			//**************************************************************************************************************
			
			protected function onSelectPage(e:PaginatorEvent):void
			{
				getMembersList();
			}
			
			protected function onChangeItemsPerPage(e:PaginatorEvent):void
			{
				context.applicationSettings.settings.membersPerPage = e.items_per_page;
				context.applicationSettings.save();
			}
			
		]]>
	</fx:Script>
	
	<s:HGroup width="100%" height="100%" paddingBottom="15" paddingLeft="15" paddingRight="15" paddingTop="15">
		
		<s:VGroup height="100%" width="100%">
			
			<s:Group width="100%">
				<s:HGroup>
					<s:Button label="Delete member" click="removeMember()" enabled="{membersGrid.selectedItem}" />
				</s:HGroup>
				
			</s:Group>
			
			
			<mx:DataGrid id="membersGrid" dataProvider="{membersCollection}" width="100%" height="100%"
						 rowCount="{context.applicationSettings.settings.membersPerPage &gt; 10 ? context.applicationSettings.settings.membersPerPage : 10}">
				<mx:columns>
					<mx:DataGridColumn dataField="memberName" headerText="Member"  />
				</mx:columns>
			</mx:DataGrid>
			
			<paginators:Paginator id="paginator" itemsPerPage="{context.applicationSettings.settings.membersPerPage}" 
								  goto="onSelectPage(event)"
								  change="onChangeItemsPerPage(event)"/>
			
			<s:HGroup>
				<s:Button label="Close" click="close()" />
			</s:HGroup>
			
		</s:VGroup>
		
	</s:HGroup>
	
</s:Panel>