<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/halo"
		title="Debuger" xmlns:mx1="library://ns.adobe.com/flex/mx">
	
	<fx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.utils.TextFlowUtil;
			
			import utils.date.DateUtil;
			
			private var SHIFT_KEY:Boolean = false;
			private var CTRL_KEY:Boolean = false;
			
			static private var _instance:Debuger;
			
			[Bindable] static public var traceEnabled:Boolean = true;
			[Bindable] static public var debugEnabled:Boolean = true;
			
			static public var argDivider:String = " ";
			
			static public var lineDateEnabled:Boolean = true;
			
			[Bindable] static private var text:String = "";
			
			static public function getInstance():Debuger
			{
				if (!_instance)
					_instance = new Debuger();
				
				return _instance;
			}
			
			public function init(s:Stage):void
			{
				s.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
				s.addEventListener(KeyboardEvent.KEY_UP, onKeyUp);
			}
			
			private function onKeyDown(e:KeyboardEvent):void
			{
				switch (e.keyCode)
				{
					case 68:
						if (e.shiftKey && e.ctrlKey)
							if (!parent)
								show();
							else
								hide();
					break;
				}
			}
			
			private function onKeyUp(e:KeyboardEvent):void
			{
				switch (e.keyCode)
				{
					case 16:
						SHIFT_KEY = false;
					break;
					case 17:
						CTRL_KEY = false;
					break;
				}
			}
			
			static public function log(...arg:*):void
			{
				if (debugEnabled)
				{
					var str:String = (arg as Array).join(argDivider);
					text += (text == "" ? "" : "<br/>") + (lineDateEnabled ? "[" + DateUtil.parseToString(new Date()) +"] " : "") + str;
					
					if (traceEnabled)
						trace(str);
				}
			}
			
			static public function error(...arg:*):void
			{
				if (debugEnabled)
				{
					var str:String = (arg as Array).join(argDivider);
					text += (text == "" ? "" : "<br/>") + (lineDateEnabled ? "[" + DateUtil.parseToString(new Date()) + "] " : "") + "<font color='#FF0000'>" + str + "</font>";
					
					if (traceEnabled)
						trace(str);
				}
			}
			
			static public function show():void
			{
				if (_instance)
					_instance.showDebuger();
			}
			
			static public function hide():void
			{
				if (_instance)
					_instance.hideDebuger();
			}
			
			public function showDebuger():void
			{
				if (!parent)
				{
					PopUpManager.addPopUp(this, FlexGlobals.topLevelApplication as DisplayObject);
					PopUpManager.centerPopUp(this);
				}
			}
			
			public function hideDebuger():void
			{
				if (parent)
					PopUpManager.removePopUp(this);
			}
			
			private function onChange():void
			{
				if (scrollToBottom.selected)
					debugTxt.verticalScrollPosition = debugTxt.maxVerticalScrollPosition;
			}

		]]>
	</fx:Script>
	
	<s:Group>
		
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="0xe7e7e7" />
			</s:fill>
		</s:Rect>
		
		<s:VGroup paddingLeft="10" paddingRight="10" paddingBottom="10" paddingTop="10" gap="10">
		
			<mx1:TextArea id="debugTxt" htmlText="{text}" width="500" height="500" editable="false"
						  updateComplete="onChange()"  
						  paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"/>
			
			<s:HGroup>
				<s:CheckBox label="Enabled" selected="{debugEnabled}" change="{debugEnabled = !debugEnabled}" />
				<s:CheckBox id="scrollToBottom" label="Scroll to bottom" selected="true" />
				<s:Button label="Clear" click="text='';" />	
				<s:Button label="Close" click="hide();" />
			</s:HGroup>
			
		</s:VGroup>
		
	</s:Group>
	
</s:Panel>
