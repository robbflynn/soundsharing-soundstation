<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx">
	
	<fx:Metadata>
		[Event(name="first", type="soundshare.station.components.paginators.events.PaginatorEvent")]
		[Event(name="previous", type="soundshare.station.components.paginators.events.PaginatorEvent")]
		[Event(name="next", type="soundshare.station.components.paginators.events.PaginatorEvent")]
		[Event(name="last", type="soundshare.station.components.paginators.events.PaginatorEvent")]
		[Event(name="goto", type="soundshare.station.components.paginators.events.PaginatorEvent")]
		[Event(name="change", type="soundshare.station.components.paginators.events.PaginatorEvent")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import soundshare.station.components.paginators.events.PaginatorEvent;
			
			
			[Bindable] public var itemsPerPage:int = 10;
			[Bindable] public var total:int = 0;
			
			[Bindable] public var pages:int = 1;
			[Bindable] public var page:int = 1;
			
			public function update(page:int, pages:int):void
			{
				this.pages = pages;
				this.page = pages < 1 ? 1 : page;
				
				trace("update:", page, pages);
			}
			
			protected function onGotoFirst():void
			{
				if (pages > 0 && page != 1)
				{
					page = 1;
					refresh();
				}
			}
			
			protected function onGotoPrevious():void
			{
				if (pages > 0 && page > 1)
				{
					page --;
					refresh();
				}
			}
			
			protected function onGotoNext():void
			{
				if (pages > 0 && page < pages)
				{
					page ++;
					refresh();
				}
			}
			
			protected function onGotoLast():void
			{
				if (pages > 0 && page != pages)
				{
					page = pages;
					refresh();
				}
			}
			
			protected function onGoto():void
			{
				if (pages > 0)
				{
					var page:int = int(gotoPageTxt.text);
					
					if (page < 1)
						page = 1;
					else
					if (page > pages)
						page = pages;
					
					gotoPageTxt.text = String(page);
					
					if (page > 0 && page <= pages)
					{
						page = page;
						refresh();
					}
				}
			}
			
			public function refresh():void
			{
				var e:PaginatorEvent = new PaginatorEvent(PaginatorEvent.GOTO);
				e.page = page;
				e.items_per_page = itemsPerPage;
				
				dispatchEvent(e);
			}
			
			protected function onChangeItemsPerPage(event:Event):void
			{
				itemsPerPage = itemsPerPageNs.value;
				
				var e:PaginatorEvent = new PaginatorEvent(PaginatorEvent.CHANGE);
				e.page = page;
				e.items_per_page = itemsPerPage;
				
				dispatchEvent(e);
			}
			
		]]>
	</fx:Script>
	
	<s:Rect width="100%" height="100%" radiusX="3" radiusY="3">
		<s:fill>
			<s:SolidColor color="0xc5c5c5" />
		</s:fill>
	</s:Rect>
	
	<s:HGroup verticalAlign="middle" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
		<s:Button label="&lt;&lt;" width="40" click="onGotoFirst()" 
				  enabled="{page &gt; 1}"/>
		<s:Button label="&lt;" width="30" click="onGotoPrevious()"
				  enabled="{page &gt; 1}"/>
		<s:Label text="{page} / {pages}" 
				 paddingTop="3" paddingLeft="5" paddingRight="5"/>
		<s:Button label="&gt;" width="30" click="onGotoNext()"
				  enabled="{pages != page}"/>
		<s:Button label="&gt;&gt;" width="40" click="onGotoLast()"
				  enabled="{pages != page}"/>
		<s:Label text="Items per page:" />
		<s:NumericStepper id="itemsPerPageNs" value="{itemsPerPage}" width="50"
						  change="onChangeItemsPerPage(event)" minimum="1" maximum="100" />
		<s:TextInput id="gotoPageTxt" width="40" restrict="1234567890" enter="onGoto()" 
					 enabled="{pages &gt; 1}"/>
		<s:Button label="G" click="onGoto()" width="30" enabled="{pages &gt; 1}"/>
		<s:Button label="R" click="refresh()" width="30" enabled="{pages &gt; 0}"/>
	</s:HGroup>
	
</s:Group>
